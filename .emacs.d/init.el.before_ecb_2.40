(setq confirm-kill-emacs 'yes-or-no-p)
(add-to-list 'load-path "/usr/share/emacs/site-lisp/emacs-goodies-el/")

;;; ECB

(add-to-list 'load-path "/home/ari/.emacs.d/ecb")
(require 'ecb)

;;; CEDET - theoretically, CEDET is already installed so nothing to do.
;;;
;;;(load-file "/home/ari/.emacs.d/cedet/cedet-devel-load.el")
;;;
;;;(add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)
;;;(add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode)
;;;
;;;;; enable semantic
;;;(semantic-mode 1)


; auto-complete-mode
(add-to-list 'load-path "~/.emacs.d/")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
; Use dictionaries by default
(setq-default ac-sources (add-to-list 'ac-sources 'ac-source-dictionary))
(global-auto-complete-mode t)
; case sensitivity is important when finding matches
(setq ac-ignore-case nil)
(ac-config-default)

;;;  JSLINT

(add-to-list 'load-path "~/.emacs.d/lintnode")
(add-to-list 'load-path "/home/ari/.nvm/v0.6.21/bin/")
(require 'flymake-jslint)
;; Make sure we can find the lintnode executable
(setq lintnode-location "~/.emacs.d/lintnode")
;; JSLint can be... opinionated
(setq lintnode-jslint-excludes (list 'nomen 'plusplus 'onevar 'white))
;; Start the server when we first open a js file and start checking
(add-hook 'js-mode-hook
          (lambda ()
            (lintnode-hook)))







; code folding
(add-hook 'js-mode-hook
          (lambda ()
            ;; Scan the file for nested code blocks
            (imenu-add-menubar-index)
            ;; Activate the folding mode
            (hs-minor-mode t)))
	
(require 'color-theme)
(eval-after-load "color-theme"
  '(progn
     (color-theme-initialize)
     (color-theme-charcoal-black)))

;;(defvar persistent-scratch-filename
;;  "~/.emacs-persistent-scratch"
;;  "Location of *scratch* file contents for persistent-scratch.")
;;
;;(defvar persistent-scratch-backup-directory
;;  "~/.emacs-persistent-scratch-backups/"
;;  "Location of backups of the *scratch* buffer contents for
;;persistent-scratch.")
;;
;;(defun make-persistent-scratch-backup-name ()
;;  "Create a filename to backup the current scratch file by
;;  concatenating PERSISTENT-SCRATCH-BACKUP-DIRECTORY with the
;;  current date and time."
;;  (concat
;;   persistent-scratch-backup-directory
;;   (replace-regexp-in-string
;;    (regexp-quote " ") "-" (current-time-string))))
;;
;;(defun save-persistent-scratch ()
;;  "Write the contents of *scratch* to the file name
;;PERSISTENT-SCRATCH-FILENAME, making a backup copy in
;;  PERSISTENT-SCRATCH-BACKUP-DIRECTORY."
;;  (with-current-buffer (get-buffer "*scratch*")
;;    (if (file-exists-p persistent-scratch-filename)
;;	(copy-file persistent-scratch-filename
;;		   (make-persistent-scratch-backup-name)))
;;    (write-region (point-min) (point-max)
;;		  persistent-scratch-filename)))
;;
;;(defun load-persistent-scratch ()
;;  "Load the contents of PERSISTENT-SCRATCH-FILENAME into the scratch
;;  buffer, clearing its contents first."
;;  (if (file-exists-p persistent-scratch-filename)
;;      (with-current-buffer (get-buffer "*scratch*")
;;	(delete-region (point-min) (point-max))
;;	(shell-command (format "cat %s" persistent-scratch-filename)
;;  (current-buffer)))))
;;
;;(load-persistent-scratch)
;;
;;(push #'save-persistent-scratch kill-emacs-hook)\
;;
;;(remove-hook 'kill-emacs-hook 'save-persistent-scratch)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(safe-local-variable-values (quote ((eval auto-fill-mode) (eval outline-mode))))
 '(tab-width 4)
 '(transient-mark-mode (quote (only . t))))

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "Grey15" :foreground "Grey" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 120 :width normal :foundry "unknown" :family "DejaVu Sans Mono")))))
